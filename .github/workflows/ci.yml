name: CI/CD Frontend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3

      - name: Установка Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Установка зависимостей
        run: npm ci

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Линтинг
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Запуск тестов
        run: npm run test

  audit:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Проверка уязвимостей
        run: npm audit --production --audit-level=high || echo 'Предупреждение - найдены уязвимости'

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Запуск mock backend
        run: |
          npx json-server --watch ./tests/mock-api/db.json --port 8081 &
          sleep 5
      - name: Установка браузеров Playwright
        run: npx playwright install --with-deps
      - name: E2E тесты
        run: npm run test:e2e:ci

  build:
    runs-on: ubuntu-latest
    needs: [lint, audit, e2e-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Сборка
        run: npm run build

  analyze-bundle:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Анализ бандла
        run: |
          if [ -f dist/stats.json ]; then
            npx webpack-bundle-analyzer dist/stats.json --mode static --no-open
          else
            echo "Файл stats.json не найден"
          fi

  docker:
    runs-on: ubuntu-latest
    needs: analyze-bundle
    steps:
      - uses: actions/checkout@v3

      - name: Логин в DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Сборка и публикация Docker-образа
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pitza:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pitza:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Деплой на сервер через SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # подгрузка последнего образа
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pitza:latest
            # остановка старого контейнера
            docker-compose -f /home/ubuntu/docker-compose.yml stop frontend
            # удаление старого образа
            docker image prune -f
            # запуск нового контейнера
            docker-compose -f /home/ubuntu/docker-compose.yml up -d --no-deps frontend
